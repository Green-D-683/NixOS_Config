# SEE https://github.com/NixOS/nixpkgs/blob/master/lib/fixed-points.nix
{lib}:

with lib; let
  _lib = (self: let importDirRec = (import ./dirOps.nix {lib = self;}).importDirRec;
    in
    foldr (a: b: a // b) {} (importDirRec ./. {lib=self;}));
  custom = makeExtensible _lib;
  in
custom.extend (self: super:
    foldr (a: b: a // b) {} (attrValues super))



# {lib, ...} @ args:
# with lib; let
#   _lib = self: let
#     callLibs = file: import file ({lib = self;} // args);
#   in {
#     attrs = callLibs ./attrs.nix;
#     importers = callLibs ./importers.nix;
#     options = callLibs ./options.nix;
#     # NOTE these are magically handled by `custom.extend` implementation below.
#     # inherit (self.attrs) mergeAny;
#     # inherit (self.importers) rakeLeaves flattenTree;
#     # inherit (self.options) mkEnableOpt' mkOpt mkOpt' mkOptStr mkBoolOpt;
#   };
#   # NOTE `makeExtensible` allows `self` referencing
#   custom = makeExtensible _lib;
# in
#   custom.extend (self: super:
#     foldr (a: b: a // b) {} (attrValues super))